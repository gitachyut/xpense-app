{"version":3,"sources":["ng://xpense-api/lib/app.config.ts","ng://xpense-api/lib/xpense-api.module.ts","ng://xpense-api/lib/models/CategoryItem.ts","ng://xpense-api/lib/models/CategoryItemVM.ts","ng://xpense-api/lib/models/ExpenseItem.ts","ng://xpense-api/lib/models/ExpenseItemVM.ts","ng://xpense-api/lib/services/category/category.service.ts","ng://xpense-api/lib/services/expense/expense.service.ts"],"names":["APP_CONFIG","InjectionToken","AppConfig","apiEndpoint","categoriesApi","expensesApi","Éµ0","XpenseApiModule","NgModule","args","declarations","imports","CommonModule","HttpClientModule","exports","providers","provide","useValue","CategoryItem","label","description","this","from","data","CategoryItemVM","id","_createdOn","_updatedOn","TypeError","Object","defineProperty","prototype","Date","Array","isArray","createdOn","updatedOn","ExpenseItem","heading","cost","spendDate","categoryId","notes","ExpenseItemVM","_spendDate","category","CategoryService","_http","_config","_base_url","_api_path","getAll","get","pipe","map","inst","create","post","update","put","delete","deleteMany","ids","idx","toString","params","Injectable","providedIn","HttpClient","Inject","ExpenseService"],"mappings":"qcAEA,IAAWA,EAAa,IAAIC,EAAAA,eAA2B,cAQ1CC,EAAwB,CACjCC,YAAa,gDACbC,cAAe,cACfC,YAAa,UCbjBC,EAaqCJ,EARrCK,EAAA,WAAA,SAAAA,KAW+B,2BAX9BC,EAAAA,SAAQC,KAAA,CAAC,CACRC,aAAc,GACdC,QAAS,CACPC,EAAAA,aACAC,EAAAA,kBAEFC,QAAS,GACTC,UAAW,CACT,CAAEC,QAAShB,EAAYiB,SAAQX,QAGJC,EAX/B,GCLAW,EAAA,WACI,SAAAA,EACWC,EACAC,GADAC,KAAAF,MAAAA,EACAE,KAAAD,YAAAA,EASf,OALWF,EAAAI,KAAP,SAAYC,GACR,OAAO,IAAIL,EACPK,EAAKJ,MACLI,EAAKH,cAEjBF,EAZA,GCAAM,EAAA,WAKI,SAAAA,EACWC,EACAN,EACAC,EACCM,EACAC,GACR,GALON,KAAAI,GAAAA,EACAJ,KAAAF,MAAAA,EACAE,KAAAD,YAAAA,EACCC,KAAAK,WAAAA,EACAL,KAAAM,WAAAA,GACHF,IAAON,EACR,MAAM,IAAIS,UAAU,4CAahC,OAvBIC,OAAAC,eAAIN,EAAAO,UAAA,YAAS,KAAb,WAAwB,OAAO,IAAIC,KAAKX,KAAKK,6CAC7CG,OAAAC,eAAIN,EAAAO,UAAA,YAAS,KAAb,WAAwB,OAAO,IAAIC,KAAKX,KAAKM,6CAYtCH,EAAAF,KAAP,SAAYC,GACR,GAAoB,iBAATA,GAAqBU,MAAMC,QAAQX,GAC1C,MAAM,IAAIK,UAAU,kCAAkCL,GAC1D,OAAO,IAAIC,EACPD,EAAKE,GACLF,EAAKJ,MACLI,EAAKH,YACLG,EAAKY,UACLZ,EAAKa,YAEjBZ,EAzBA,GCAAa,EAAA,WACI,SAAAA,EACWC,EACAC,EACAC,EACAC,EACAC,GAJArB,KAAAiB,QAAAA,EACAjB,KAAAkB,KAAAA,EACAlB,KAAAmB,UAAAA,EACAnB,KAAAoB,WAAAA,EACApB,KAAAqB,MAAAA,EAYf,OARWL,EAAAf,KAAP,SAAYC,GACR,OAAO,IAAIc,EACPd,EAAKe,QACLf,EAAKgB,KACLhB,EAAKiB,UACLjB,EAAKkB,WACLlB,EAAKmB,QAEjBL,EAlBA,GCAAM,EAAA,WAQI,SAAAA,EACWlB,EACAa,EACAC,EACCK,EACDC,EACAH,EACChB,EACAC,GAPDN,KAAAI,GAAAA,EACAJ,KAAAiB,QAAAA,EACAjB,KAAAkB,KAAAA,EACClB,KAAAuB,WAAAA,EACDvB,KAAAwB,SAAAA,EACAxB,KAAAqB,MAAAA,EACCrB,KAAAK,WAAAA,EACAL,KAAAM,WAAAA,EAehB,OA3BIE,OAAAC,eAAIa,EAAAZ,UAAA,YAAS,KAAb,WAAwB,OAAO,IAAIC,KAAKX,KAAKuB,6CAC7Cf,OAAAC,eAAIa,EAAAZ,UAAA,YAAS,KAAb,WAAwB,OAAO,IAAIC,KAAKX,KAAKK,6CAC7CG,OAAAC,eAAIa,EAAAZ,UAAA,YAAS,KAAb,WAAwB,OAAO,IAAIC,KAAKX,KAAKM,6CActCgB,EAAArB,KAAP,SAAYC,GACR,OAAO,IAAIoB,EACPpB,EAAKE,GACLF,EAAKe,QACLf,EAAKgB,KACLhB,EAAKiB,UACLhB,EAAeF,KAAKC,EAAKsB,UACzBtB,EAAKmB,MACLnB,EAAKY,UACLZ,EAAKa,YAEjBO,EA/BA,GCAAG,EAAA,WAgBE,SAAAA,EAAoBC,EAA+CC,GAA/C3B,KAAA0B,MAAAA,EAA+C1B,KAAA2B,QAAAA,EACjE3B,KAAK4B,UAAY5B,KAAK2B,QAAQ7C,YAC9BkB,KAAK6B,UAAY7B,KAAK2B,QAAQ5C,qBAGhC0C,EAAAf,UAAAoB,OAAA,WACE,OAAO9B,KAAK0B,MAAMK,IAAI,GAAG/B,KAAK4B,UAAY5B,KAAK6B,WAC5CG,KAAKC,EAAAA,IAAI,SAAC/B,GAAgC,OAAAA,EAAK+B,IAAI,SAAAC,GAAQ,OAAA/B,EAAeF,KAAKiC,SAGpFT,EAAAf,UAAAqB,IAAA,SAAI3B,GACF,OAAOJ,KAAK0B,MAAMK,IAAI,GAAG/B,KAAK4B,UAAY5B,KAAK6B,UAAYzB,GACxD4B,KAAKC,EAAAA,IAAI,SAAC/B,GAAyB,OAAAC,EAAeF,KAAKC,OAG5DuB,EAAAf,UAAAyB,OAAA,SAAOjC,GACL,OAAOF,KAAK0B,MAAMU,KAAK,GAAGpC,KAAK4B,UAAY5B,KAAK6B,UAAa3B,GAC1D8B,KAAKC,EAAAA,IAAI,SAAC/B,GAAyB,OAAAC,EAAeF,KAAKC,OAG5DuB,EAAAf,UAAA2B,OAAA,SAAOjC,EAAYF,GACjB,OAAOF,KAAK0B,MAAMY,IAAI,GAAGtC,KAAK4B,UAAY5B,KAAK6B,UAAYzB,EAAMF,GAC9D8B,KAAKC,EAAAA,IAAI,SAAC/B,GAAyB,OAAAC,EAAeF,KAAKC,OAG5DuB,EAAAf,UAAA6B,UAAA,SAAOnC,GACL,OAAOJ,KAAK0B,MAAMa,UAAO,GAAGvC,KAAK4B,UAAY5B,KAAK6B,UAAYzB,GAC3D4B,KAAKC,EAAAA,IAAI,gBAGdR,EAAAf,UAAA8B,WAAA,SAAWC,OACLC,EAAMD,EAAIR,IAAI,SAAA7B,GAAM,OAAAA,EAAGuC,aAC3B,OAAO3C,KAAK0B,MAAMa,UAAO,GAAGvC,KAAK4B,UAAY5B,KAAK6B,UAAS,QAAS,CAAEe,OAAQ,CAAEH,IAAKC,KAClFV,KAAKC,EAAAA,IAAI,oCAzCfY,EAAAA,WAAUzD,KAAA,CAAC,CACV0D,WAAY,oDARLC,EAAAA,8CAeiCC,EAAAA,OAAM5D,KAAA,CAACT,iJAhBjD,GCAAsE,EAAA,WAgBE,SAAAA,EAAoBvB,EAA+CC,GAA/C3B,KAAA0B,MAAAA,EAA+C1B,KAAA2B,QAAAA,EACjE3B,KAAK4B,UAAY5B,KAAK2B,QAAQ7C,YAC9BkB,KAAK6B,UAAY7B,KAAK2B,QAAQ3C,mBAGhCiE,EAAAvC,UAAAoB,OAAA,WACE,OAAO9B,KAAK0B,MAAMK,IAAI,GAAG/B,KAAK4B,UAAY5B,KAAK6B,WAC5CG,KAAKC,EAAAA,IAAI,SAAC/B,GAA+B,OAAAA,EAAK+B,IAAI,SAAAC,GAAQ,OAAAZ,EAAcrB,KAAKiC,SAGlFe,EAAAvC,UAAAqB,IAAA,SAAI3B,GACF,OAAOJ,KAAK0B,MAAMK,IAAI,GAAG/B,KAAK4B,UAAY5B,KAAK6B,UAAYzB,GACxD4B,KAAKC,EAAAA,IAAI,SAAC/B,GAAwB,OAAAoB,EAAcrB,KAAKC,OAG1D+C,EAAAvC,UAAAyB,OAAA,SAAOjC,GACL,OAAOF,KAAK0B,MAAMU,KAAK,GAAGpC,KAAK4B,UAAY5B,KAAK6B,UAAa3B,GAC1D8B,KAAKC,EAAAA,IAAI,SAAC/B,GAAwB,OAAAoB,EAAcrB,KAAKC,OAG1D+C,EAAAvC,UAAA2B,OAAA,SAAOjC,EAAYF,GACjB,OAAOF,KAAK0B,MAAMY,IAAI,GAAGtC,KAAK4B,UAAY5B,KAAK6B,UAAYzB,EAAMF,GAC9D8B,KAAKC,EAAAA,IAAI,SAAC/B,GAAwB,OAAAoB,EAAcrB,KAAKC,OAG1D+C,EAAAvC,UAAA6B,UAAA,SAAOnC,GACL,OAAOJ,KAAK0B,MAAMa,UAAO,GAAGvC,KAAK4B,UAAY5B,KAAK6B,UAAYzB,GAC3D4B,KAAKC,EAAAA,IAAI,gBAGdgB,EAAAvC,UAAA8B,WAAA,SAAWC,OACLC,EAAMD,EAAIR,IAAI,SAAA7B,GAAM,OAAAA,EAAGuC,aAC3B,OAAO3C,KAAK0B,MAAMa,UAAO,GAAGvC,KAAK4B,UAAY5B,KAAK6B,UAAS,QAAS,CAAEe,OAAQ,CAAEH,IAAKC,KAClFV,KAAKC,EAAAA,IAAI,oCAzCfY,EAAAA,WAAUzD,KAAA,CAAC,CACV0D,WAAY,oDARLC,EAAAA,8CAeiCC,EAAAA,OAAM5D,KAAA,CAACT,iJAhBjD","sourcesContent":["import { InjectionToken } from \"@angular/core\";\n\nexport let APP_CONFIG = new InjectionToken<IAppConfig>(\"app.config\");\n\nexport interface IAppConfig {\n    apiEndpoint: string;\n    categoriesApi: string;\n    expensesApi: string;\n}\n\nexport const AppConfig: IAppConfig = {\n    apiEndpoint: \"https://gentle-shelf-74899.herokuapp.com/api/\",\n    categoriesApi: \"categories/\",\n    expensesApi: \"items/\"\n};","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { APP_CONFIG, AppConfig } from './app.config';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [],\n  providers: [\n    { provide: APP_CONFIG, useValue: AppConfig }\n  ]\n})\nexport class XpenseApiModule { }\n","export class CategoryItem {\n    public constructor(\n        public label: string,\n        public description: string) {\n\n    }\n\n    static from(data: any): CategoryItem {\n        return new CategoryItem(\n            data.label,\n            data.description);\n    }\n}","export class CategoryItemVM {\n\n    get createdOn(): Date { return new Date(this._createdOn); }\n    get updatedOn(): Date { return new Date(this._updatedOn); }\n\n    public constructor(\n        public id: number,\n        public label: string,\n        public description: string,\n        private _createdOn: string,\n        private _updatedOn: string) {\n        if (!id || !label)\n            throw new TypeError(`required fields id and label are missing`);\n    }\n\n    static from(data: any): CategoryItemVM {\n        if (typeof data !== \"object\" || Array.isArray(data))\n            throw new TypeError(`Expected object but got ${typeof data}`);\n        return new CategoryItemVM(\n            data.id,\n            data.label,\n            data.description,\n            data.createdOn,\n            data.updatedOn);\n    }\n}","export class ExpenseItem {\n    public constructor(\n        public heading: string,\n        public cost: number,\n        public spendDate: Date,\n        public categoryId: number,\n        public notes: string) {\n\n    }\n\n    static from(data: any): ExpenseItem {\n        return new ExpenseItem(\n            data.heading,\n            data.cost,\n            data.spendDate,\n            data.categoryId,\n            data.notes);\n    }\n}","import { CategoryItemVM } from './CategoryItemVM';\n\nexport class ExpenseItemVM {\n\n    get spendDate(): Date { return new Date(this._spendDate); }\n    get createdOn(): Date { return new Date(this._createdOn); }\n    get updatedOn(): Date { return new Date(this._updatedOn); }\n\n    public constructor(\n        public id: number,\n        public heading: string,\n        public cost: number,\n        private _spendDate: string,\n        public category: CategoryItemVM,\n        public notes: string,\n        private _createdOn: string,\n        private _updatedOn: string) {\n\n    }\n\n    static from(data: any): ExpenseItemVM {\n        return new ExpenseItemVM(\n            data.id,\n            data.heading,\n            data.cost,\n            data.spendDate,\n            CategoryItemVM.from(data.category),\n            data.notes,\n            data.createdOn,\n            data.updatedOn);\n    }\n}","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { CategoryItemVM } from '../../models/CategoryItemVM';\nimport { CategoryItem } from '../../models/CategoryItem';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { APP_CONFIG, IAppConfig } from '../../app.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n\n  private _base_url: string;\n  private _api_path: string;\n\n  constructor(private _http: HttpClient, @Inject(APP_CONFIG) private _config: IAppConfig) {\n    this._base_url = this._config.apiEndpoint;\n    this._api_path = this._config.categoriesApi;\n  }\n\n  getAll(): Observable<CategoryItemVM[]> {\n    return this._http.get(`${this._base_url}${this._api_path}`)\n      .pipe(map((data: Array<CategoryItemVM>) => data.map(inst => CategoryItemVM.from(inst))))\n  }\n\n  get(id: number): Observable<CategoryItemVM> {\n    return this._http.get(`${this._base_url}${this._api_path}${id}`)\n      .pipe(map((data: CategoryItemVM) => CategoryItemVM.from(data)))\n  }\n\n  create(data: CategoryItem): Observable<CategoryItemVM> {\n    return this._http.post(`${this._base_url}${this._api_path}`, data)\n      .pipe(map((data: CategoryItemVM) => CategoryItemVM.from(data)))\n  }\n\n  update(id: number, data: CategoryItem): Observable<CategoryItemVM> {\n    return this._http.put(`${this._base_url}${this._api_path}${id}`, data)\n      .pipe(map((data: CategoryItemVM) => CategoryItemVM.from(data)))\n  }\n\n  delete(id: number): Observable<void> {\n    return this._http.delete(`${this._base_url}${this._api_path}${id}`)\n      .pipe(map(() => { }))\n  }\n\n  deleteMany(ids: number[]): Observable<void> {\n    let idx = ids.map(id => id.toString());\n    return this._http.delete(`${this._base_url}${this._api_path}batch`, { params: { ids: idx } })\n      .pipe(map(() => { }))\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ExpenseItem } from '../../models/ExpenseItem';\nimport { ExpenseItemVM } from '../../models/ExpenseItemVM';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { APP_CONFIG, IAppConfig } from '../../app.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExpenseService {\n\n  private _base_url: string;\n  private _api_path: string;\n\n  constructor(private _http: HttpClient, @Inject(APP_CONFIG) private _config: IAppConfig) {\n    this._base_url = this._config.apiEndpoint;\n    this._api_path = this._config.expensesApi;\n  }\n\n  getAll(): Observable<ExpenseItemVM[]> {\n    return this._http.get(`${this._base_url}${this._api_path}`)\n      .pipe(map((data: Array<ExpenseItemVM>) => data.map(inst => ExpenseItemVM.from(inst))))\n  }\n\n  get(id: number): Observable<ExpenseItemVM> {\n    return this._http.get(`${this._base_url}${this._api_path}${id}`)\n      .pipe(map((data: ExpenseItemVM) => ExpenseItemVM.from(data)))\n  }\n\n  create(data: ExpenseItem): Observable<ExpenseItemVM> {\n    return this._http.post(`${this._base_url}${this._api_path}`, data)\n      .pipe(map((data: ExpenseItemVM) => ExpenseItemVM.from(data)))\n  }\n\n  update(id: number, data: ExpenseItem): Observable<ExpenseItemVM> {\n    return this._http.put(`${this._base_url}${this._api_path}${id}`, data)\n      .pipe(map((data: ExpenseItemVM) => ExpenseItemVM.from(data)))\n  }\n\n  delete(id: number): Observable<void> {\n    return this._http.delete(`${this._base_url}${this._api_path}${id}`)\n      .pipe(map(() => { }))\n  }\n\n  deleteMany(ids: number[]): Observable<void> {\n    let idx = ids.map(id => id.toString());\n    return this._http.delete(`${this._base_url}${this._api_path}batch`, { params: { ids: idx } })\n      .pipe(map(() => { }))\n  }\n}\n"]}